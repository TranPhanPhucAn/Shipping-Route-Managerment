# version: '3.8'
services:
  db:
    container_name: db
    image: postgres:alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./docker-utils:/docker-entrypoint-initdb.d
      - ./db:/var/lib/postgresql/data
    ports:
      - 5432:${POSTGRES_PORT}
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
  # gateway:
  #   container_name: gateway
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     args:
  #       SERVICE_PATH: gateway
  #   # restart: always
  #   env_file:
  #     - .env
  #   ports:
  #     - 5000:5000
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #     auth:
  #       condition: service_healthy
  #       restart: true
  #     routes:
  #       condition: service_healthy
  #       restart: true
  #     redis:
  #       condition: service_healthy
  #       restart: true
  # auth:
  #   container_name: auth
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     args:
  #       SERVICE_PATH: auth
  #   # restart: always
  #   env_file:
  #     - .env
  #   ports:
  #     - 5001:5001
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #     redis:
  #       condition: service_healthy
  #       restart: true
  #   healthcheck:
  #     test: wget --quiet --tries=1 --spider http://auth:5000/health || exit 1z
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s

  # routes:
  #   container_name: routes
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     args:
  #       SERVICE_PATH: routes
  #   # restart: always
  #   env_file:
  #     - .env
  #   ports:
  #     - 5002:5002
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #   healthcheck:
  #     test: wget --quiet --tries=1 --spider http://routes:5001/health || exit 1z
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s

  redis:
    container_name: redis
    image: redis:6.0.7
    restart: always
    volumes:
      - redis_volume_data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  redis_insight:
    container_name: redis_insight
    image: redislabs/redisinsight:1.14.0
    restart: always
    ports:
      - 8001:8001
    volumes:
      - redis_insight_volume_data:/data
    depends_on:
      - redis

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
    depends_on:
      - 'kafka'
  kafka:
    image: obsidiandynamics/kafka
    restart: 'no'
    ports:
      - '2181:2181'
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: 'INTERNAL://:29092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: '6000'
      KAFKA_RESTART_ATTEMPTS: '10'
      KAFKA_RESTART_DELAY: '5'
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: '0'
volumes:
  db: {}
  redis_volume_data: {}
  redis_insight_volume_data: {}
